{"version":3,"file":"check.js","sourceRoot":"","sources":["../../../../src/cli/services/update/check.ts"],"names":[],"mappings":"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","sourcesContent":["import {schemaV1} from './schemas/update_extension_schema_v1.js'\nimport {fileExists, readFile} from '@shopify/cli-kit/node/fs'\nimport {joinPath} from '@shopify/cli-kit/node/path'\nimport {zod} from '@shopify/cli-kit/node/schema'\nimport {renderSuccess} from '@shopify/cli-kit/node/ui'\nimport {AbortError} from '@shopify/cli-kit/node/error'\n\ntype ValidationResult = zod.SafeParseError<unknown>\n\nexport const check = async (scriptPath: string) => {\n  const path = joinPath(scriptPath)\n\n  const result = await validateSchema(path)\n\n  if (!result.success) {\n    const issues = result.error.issues\n    const items = issues.map(asErrorMessage).filter(Boolean) as string[]\n\n    throw new AbortError(`The '${path}' script is invalid:`, {\n      list: {items},\n    })\n  }\n\n  renderSuccess({\n    body: [`The '${path}' script is valid.`],\n  })\n}\n\nfunction asErrorMessage(issue: zod.ZodIssue) {\n  const errorsMap: {[key: string]: string} = {\n    Required: 'property is required',\n    'Invalid input': \"doesn't have the expected attributes\",\n    'Invalid input: Should pass single schema': \"doesn't have the expected attributes\",\n    \"Unrecognized key(s) in object: 'key'\": \"doesn't have the expected attributes\",\n  }\n\n  if (issue.code === 'unrecognized_keys') {\n    const location = issue.path.length === 0 ? '' : ` at \"${issue.path.slice(0, 4).join('/')}\"`\n    return `The \"${issue.keys.join('/')}\"${location} is not a permitted key`\n  }\n\n  if (issue.path.length === 0) {\n    return\n  }\n\n  const property = issue.path.slice(0, 4).join('/')\n  const message = errorsMap[issue.message] ?? issue.message.toLowerCase()\n\n  return `The \"${property}\" ${message}`\n}\n\nasync function validateSchema(scriptPath: string) {\n  const exists = await fileExists(scriptPath)\n\n  if (!exists) {\n    throw new AbortError(`The '${scriptPath}' script doesn't exist.`)\n  }\n\n  const scriptFile = await readFile(scriptPath)\n\n  let scriptFileObj = {}\n\n  try {\n    scriptFileObj = JSON.parse(scriptFile.toString())\n  } catch (error) {\n    if (error instanceof SyntaxError) {\n      throw new AbortError(error.message)\n    }\n  }\n\n  return schemaV1.safeParse(scriptFileObj) as ValidationResult\n}\n"]}